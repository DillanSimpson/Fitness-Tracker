package com.swoletics.fitnesstracker.configuration;

import java.util.Locale;
import java.util.Properties;
import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableWebMvc
@EnableSwagger2
@EnableTransactionManagement
@ComponentScan(basePackages = "com.swoletics.fitnesstracker")
public class AppConfiguration implements WebMvcConfigurer {

	/*
	 * {@link ViewControllerRegistry} Assists with the registration of simple
	 * automated controllers pre-configured with status code and/or a view. It is
	 * similar to welcome page in web.xml
	 */
	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
		registry.addViewController("/").setViewName("login");
	}

	@Override
	public void addCorsMappings(CorsRegistry registry) {
		registry.addMapping("/**").allowedMethods("GET", "POST");
	}

	/*
	 * Intended to be used when the Spring MVC {@link DispatcherServlet} is mapped
	 * to "/" thus overriding the Servlet container's default handling of static
	 * resources.
	 */
	@Override
	public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
		configurer.enable();
	}

	/*
	 * {@link ResourceHandlerRegistry} Add a resource handler for serving static
	 * resources based on the specified URL path patterns.
	 */
	@Override
	public void addResourceHandlers(final ResourceHandlerRegistry registry) {
		registry.addResourceHandler("/resources/**").addResourceLocations("/resources/").setCachePeriod(31556926);
	}

	/*
	 * {@link ViewResolver} The view class for all views generated by resolver can
	 * be specified
	 */
	@Bean
	public ViewResolver getViewResolver() {
		InternalResourceViewResolver internalResourceViewResolver = new InternalResourceViewResolver();
		internalResourceViewResolver.setPrefix("/WEB-INF/views/jsp/");
		internalResourceViewResolver.setSuffix(".jsp");
		return internalResourceViewResolver;
	}

	/*
	 * {@link EntityManagerFactoryBean} bean declares the persistence JPA and
	 * DataSource properties
	 */
	@Bean(name = "entityManagerFactoryBean")
	public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
		LocalContainerEntityManagerFactoryBean localContainerEntityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();
		localContainerEntityManagerFactoryBean.setDataSource(dataSource());
		localContainerEntityManagerFactoryBean.setPackagesToScan(new String[] { "com.swoletics.fitnesstracker.model" });

		JpaVendorAdapter jpaVendorAdapter = new HibernateJpaVendorAdapter();
		localContainerEntityManagerFactoryBean.setJpaVendorAdapter(jpaVendorAdapter);
		localContainerEntityManagerFactoryBean.setJpaProperties(jpaProperties());

		return localContainerEntityManagerFactoryBean;
	}

	/*
	 * {@link DataSource} bean specifies the properties of MySql DataBase
	 */
	@Bean(name = "dataSource")
	public DataSource dataSource() {
		DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource();
		driverManagerDataSource.setDriverClassName("com.mysql.jdbc.Driver");
		driverManagerDataSource.setUrl("jdbc:mysql://localhost:3306/fitnesstracker");
		driverManagerDataSource.setUsername("root");
		driverManagerDataSource.setPassword("admin");
		return driverManagerDataSource;
	}

	/*
	 * {@link JPATransactionManager} Binds a JPA EntityManager from the specified
	 * factory to the thread, potentially allowing for one thread-bound
	 * EntityManager per factory.
	 */
	@Bean(name = "transactionManager")
	public JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {
		JpaTransactionManager jpaTransactionManager = new JpaTransactionManager();
		jpaTransactionManager.setEntityManagerFactory(entityManagerFactory);
		return jpaTransactionManager;
	}

	/*
	 * Bean post-processor that automatically applies persistence exception
	 * translation to any bean marked with Spring's @{@link
	 * org.springframework.stereotype.Repository Repository} annotation, adding a
	 * corresponding {@link PersistenceExceptionTranslationAdvisor} to the exposed
	 * proxy (either an existing AOP proxy or a newly generated proxy that
	 * implements all of the target's interfaces)
	 */
	@Bean
	public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {
		return new PersistenceExceptionTranslationPostProcessor();
	}

	/*
	 * {@link ResourceBundleMessageSource} bean is used for accessing resource
	 * bundles using specified basenames
	 */
	@Bean(name = "messageSource")
	public ResourceBundleMessageSource messageSource() {
		ResourceBundleMessageSource source = new ResourceBundleMessageSource();
		source.setBasename("/properties/i18n-resources");
		return source;
	}

	/*
	 * {@link LocaleResolver} bean used to Set a default Locale that this resolver
	 * will return
	 */
	@Bean(name = "localeResolver")
	public LocaleResolver localResolver() {
		SessionLocaleResolver sessionLocaleResolver = new SessionLocaleResolver();
		sessionLocaleResolver.setDefaultLocale(Locale.ENGLISH);
		return sessionLocaleResolver;
	}

	/*
	 * {@link Properties} sets the required Hibernate properties
	 */
	Properties jpaProperties() {
		Properties properties = new Properties();
		properties.setProperty("hibernate.hbm2ddl.auto", "update");
		properties.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQL5Dialect");
		properties.setProperty("hibernate.show_sql", "true");
		return properties;
	}

	/*
	 * {@link Docket} bean is used to configure the Swagger UI for each controller
	 *
	 * @return {@link Docket} used to build a subset of the services to be displayed
	 * for Swagger documentation
	 */
	@Bean(name = "SwaggerUI")
	public Docket swaggerApi() {
		return new Docket(DocumentationType.SWAGGER_2).select()
				.apis(RequestHandlerSelectors.basePackage("com.swoletics.fitnesstracker.controller"))
				.paths(PathSelectors.any()).build();
	}

	/**
	 * Provides a {@link RestTemplate} which can be used to handle HTTP connections.
	 *
	 * @return A new instance of the {@link RestTemplate}.
	 */
	@Bean(name = "restTemplate")
	public RestTemplate restTemplate() {
		return new RestTemplate();
	}
}
